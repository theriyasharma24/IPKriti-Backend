const express = require("express");
const router = express.Router();
const { check, validationResult } = require("express-validator");
var _ = require("lodash");
const mongoDB = require("mongodb");

const Cart = require("../models/Cart");

// @route     GET api/experience
// @desc      Get all experiences generated by user
// @access   public
router.get("/:id", async (req, res) => {
  try {
    const cartitem = await Cart.find({ user_id: req.params.id }).sort({
      date: -1, //sorting starting from the recent date
    });

    res.json(cartitem);
  } catch (err) {
    console.error(err.message);
    res.status(500).send("Server Error");
  }
});

// @route     POST api/experience
// @desc      Add new experience
// @access    Private

router.post("/:id", async (req, res) => {
  let test = true;
  const errors = validationResult(req);
  if (!errors.isEmpty()) {
    return res.status(400).json({ errors: errors.array() });
  }
  let newItem;
  const { quantity, _id, amount } = req.body;

  try {
    const cartdata = await Cart.find({
      user_id: req.params.id,
    }).sort({
      date: -1, //sorting starting from the recent date
    });

    {
      (await cartdata.length) == 0
        ? null
        : cartdata?.map(async (cart) => {
            cart.artwork_id == _id ? await (test = false) : null;
          });
    }
    {
      (await test)
        ? ((newItem = new Cart({
            quantity,
            artwork_id: _id,
            user_id: req.params.id,
            amount: amount,
          })),
          await newItem.save(),
          res.json(newItem))
        : res.json(JSON.parse('{"error":"Cart already added"}'));
    }
  } catch (err) {
    console.error("Cart error:", err.message);
    res.status(500).send("Server Error");
  }
});
// @route     PUT api/experience/:id
// @desc      Update experience
// @access    Private
router.put("/:id", async (req, res) => {
  const { quantity, category, user, _id } = req.body;
  const artwork = await Artwork.find({}).sort({
    date: -1, //sorting starting from the recent date
  });

  let result = [];
  // Build quantity object
  const cartitemFields = {};
  if (quantity) cartitemFields.quantity = quantity;
  if (category) cartitemFields.category = category;
  if (_id) cartitemFields._id = _id;
  if (user) cartitemFields.user = user;
  try {
    let cartitem = await Cart.findById(req.params.id);

    if (!cartitem) return res.status(404).json({ msg: "No Information found" });

    cartitem = await Cart.findByIdAndUpdate(
      req.params.id,
      { $set: cartitemFields },
      { new: true }
    );

    artwork?.map((art) => {
      cartprodid = JSON.stringify(cartitem?.artwork);
      artid = JSON.stringify(art._id);
      {
        cartprodid === artid
          ? (result = [...result, _.merge(art, cartitem)])
          : null;
      }
    });

    res.json(result);

    // res.json(cartitem);
  } catch (err) {
    console.error("Cart error2:", err.message);
    res.status(500).send("Server Error");
  }
});

module.exports = router;
